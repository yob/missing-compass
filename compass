#!/usr/bin/env ruby

require 'net/http'
require 'json'
require 'time'
require 'base64'
require 'mail'
require 'clamp'

module MissingCompass

  # There's currently no way to fetch event (ie excursion) data via the mobile API. It's
  # possible to get some minimal details via the API intended for use by the website, but it's
  # wrapped in data structures for their UI components. I'll capture the event data this way
  # for now, but leave the `Event` class and namespace free for a time when the real event data
  # is (hopefully)_available.
  class AttentionBindItemEvent

    attr_reader :data

    def initialize(data)
      @data = data
    end

    def id
      @data.fetch("id", 0)
    end

    def name
      @data.fetch("n", "")
    end

    def event_start_time
      parse_time(@data.fetch("s", ""))
    end

    def event_end_time
      parse_time(@data.fetch("e", ""))
    end

    def price
      @data.fetch("costAmount", 0)
    end

    def url(hostname)
      "https://#{hostname}/Organise/Activities/Events/Event.aspx?eventId=#{id}"
    end

    private

    def parse_time(str)
      Time.iso8601(str)
    end
  end

  class User

    attr_reader :data

    def initialize(data)
      @data = data
    end

    def id
      @data.fetch("userId", 0)
    end

    def display_code
      @data.fetch("displayCode", "")
    end

    def report_name
      @data.fetch("reportName", "")
    end

    def emails
      @data.fetch("emails", [])
    end
  end

  class NewsItemAttachment

    attr_reader :data

    def initialize(data)
      @data = data
    end

    def id
      @data.fetch("assetId", 0)
    end

    def is_image
      @data.fetch("isImage", false)
    end

    def name
      @data.fetch("name", "")
    end

    def original_file_name
      @data.fetch("originalFileName", "")
    end

    def source_organisation_id
      @data.fetch("sourceOrganisationId", nil)
    end

    def url
      @data.fetch("url", nil)
    end

    def bytes
      if @data.key?("bytes_base64")
        Base64.decode64(@data.fetch("bytes_base64"))
      end
    end

    def add_bytes(bytes)
      @data["bytes_base64"] = Base64.encode64(bytes.to_s)
    end
  end

  class NewsItem

    attr_reader :data

    def initialize(data)
      @data = data
    end

    def id
      @data.fetch("newsItemId", 0)
    end

    def attachments
      @data.fetch("attachments", []).map { |item|
        NewsItemAttachment.new(item)
      }
    end

    def content
      @data.fetch("content", "")
    end

    def content_html
      @data.fetch("contentHtml", "")
    end

    def post_date
      parse_time(@data.fetch("postDateUtc", ""))
    end

    def priority
      @data.fetch("priority", false)
    end

    def title
      @data.fetch("title", "")
    end

    def uploader
      @data.fetch("uploader", "")
    end

    def user_image_url
      @data.fetch("userImageUrl", "")
    end

    def eql?(other)
      other.is_a?(NewsItem) && @id == other.id
    end

    def url(hostname)
      "https://#{hostname}/Communicate/News/ViewNewsItem.aspx?newsItemId=#{id}"
    end

    private

    def parse_time(str)
      Time.iso8601(str)
    end
  end

  class Message

    attr_reader :data

    def initialize(data)
      @data = data
    end

    def id
      @data.fetch("id", 0)
    end

    def archived
      @data.fetch("archived", false)
    end

    def content_html
      @data.fetch("contentHtml", "")
    end

    def eql?(other)
      other.is_a?(Message) && @id == other.id
    end

    def date
      parse_time(@data.fetch("date", ""))
    end

    def news_item_id
      @data.fetch("parameters", {}).fetch("newsItemId", nil)
    end

    def sender_name
      @data.fetch("sender", {}).fetch("reportName","")
    end

    def sender_id
      @data.fetch("sender", {}).fetch("userId","")
    end

    private

    def parse_time(str)
      Time.iso8601(str)
    end
  end

  class Repository
    def initialize(dir, file_prefix, klass)
      raise ArgumentError, "#{dir} is not a directory" unless File.directory?(dir)
      @dir = File.expand_path(dir)
      @file_prefix = file_prefix
      @klass = klass
    end

    def self.attention_bind_item_event(dbpath)
      new(dbpath, "event-bind", MissingCompass::AttentionBindItemEvent)
    end

    def self.message(dbpath)
      new(dbpath, "message", MissingCompass::Message)
    end

    def self.news_item(dbpath)
      new(dbpath, "news-item", MissingCompass::NewsItem)
    end

    def self.news_item_attachment(dbpath)
      new(dbpath, "attachment", MissingCompass::NewsItemAttachment)
    end

    def self.user(dbpath)
      new(dbpath, "user", MissingCompass::User)
    end

    def exists?(thing)
      File.file?(build_path(thing))
    end

    def save(thing)
      return true if exists?(thing)

      File.open(build_path(thing), "wb") do |io|
        io.write(JSON.pretty_generate(thing.data))
      end
    end

    def find(id)
      path = File.join(@dir, "#{@file_prefix}-#{id}.json")
      if File.file?(path)
        @klass.new(JSON.parse(File.read(path)))
      end
    end

    def all
      Dir.glob("#{@dir}/#{@file_prefix}-*.json").map do |path|
        @klass.new(JSON.parse(File.read(path)))
      end
    end

    private

    def build_path(thing)
      File.join(@dir, "#{@file_prefix}-#{thing.id}.json")
    end

  end

  class CompassEmail
    attr_reader :to, :from, :body, :attachments

    def initialize(to:, from:, subject:, body:, attachments: [])
      @to, @from, @subject, @body, @attachments = to, from, subject, body, attachments
    end

    def subject
      "Compass: #{@subject}"
    end

    def charset
      if ascii_body?
        "ASCII"
      elsif utf8_body?
        "UTF-8"
      else
        raise "unrecognised text encoding"
      end
    end

    private

    def ascii_body?
      @body.to_s.ascii_only?
    end

    def utf8_body?
      temp_body = @body.to_s.dup.force_encoding("UTF-8")
      temp_body.valid_encoding?
    end

    def self.from_event(to, from, event, url)
      body = "A new event has been posted to compass.\n\nURL: #{url}\n\n=================================================\n\nClick through for details"
      new(
        to: to,
        from: from,
        subject: event.name,
        body: body,
      )
    end

    def self.from_message(to, from, message, news_item, url, attachments)
      body = "A new message has been posted to compass.\n\nURL: #{url}\n\n=================================================\n\n"
      body += news_item.content.gsub("\r","").gsub("\n\n", "\n")
      new(
        to: to,
        from: from,
        subject: message.content_html,
        body: compacted_body,
        attachments: attachments
      )
    end

    def self.from_news_item(to, from, news_item, url, attachments)
      body = "A new message has been posted to compass.\n\nURL: #{url}\n\n=================================================\n\n"
      body += news_item.content.gsub("\r","").gsub("\n\n", "\n")
      new(
        to: to,
        from: from,
        subject: news_item.title,
        body: body,
        attachments: attachments
      )
    end
  end

  class CompassClient
    USER_AGENT = "iOS/12_1_2 type/iPhone CompassEducation/4.5.3"
    PATH_AUTH = "/services/admin.svc/AuthenticateUserCredentials"
    PATH_NEWSFEED = "/services/mobile.svc/GetNewsFeed?sessionstate=readonly"
    PATH_GET_MESSAGES = "/services/mobile.svc/GetMessages?sessionstate=readonly"
    PATH_PST_CYCLES = "/services/mobile.svc/GetPstCycles?sessionstate=readonly"
    PATH_CHECK_PARENT_DETAILS = "/services/mobile.svc/CheckParentDetails?sessionstate=readonly"
    PATH_GET_PERSONAL_DETAILS = "/services/mobile.svc/GetPersonalDetails?sessionstate=readonly"
    PATH_DOWNLOAD_FILE = "/services/FileDownload/FileRequestHandler"

    def initialize(hostname, username, password)
      @hostname = hostname
      @cookie = generate_cookie(username, password)
    end

    def check_parent_details
      response = post(
        path: PATH_CHECK_PARENT_DETAILS,
        headers: {"Cookie" => @cookie},
      )
      JSON.parse(response.body)
    end

    def download_file(file_id: )
      response = get(
        path: "#{PATH_DOWNLOAD_FILE}?FileDownloadType=1&file=#{file_id}",
        headers: {"Cookie" => @cookie},
      )
      response.body
    end

    def get_messages
      response = post(
        path: PATH_GET_MESSAGES,
        headers: {"Cookie" => @cookie},
      )
      data = JSON.parse(response.body)
      data.fetch("d",{}).fetch("data", []).map { |item|
        Message.new(item)
      }.sort_by(&:date)
    end

    def get_news_feed
      response = post(
        path: PATH_NEWSFEED,
        headers: {"Cookie" => @cookie},
      )
      data = JSON.parse(response.body)
      data.fetch("d",{}).fetch("data", []).map { |item|
        NewsItem.new(item)
      }.sort_by(&:post_date)
    end

    def get_news_item(id)
      response = post(
        path: "/services/mobile.svc/GetNewsItemById?sessionstate=readonly",
        headers: {"Cookie" => @cookie, "Content-Type" => "application/json"},
        body: JSON.dump(newsItemId: id)
      )
      JSON.parse(response.body)
    end

    def get_locations
      response = post(
        path: "/services/mobile.svc/GetAllLocations",
        headers: {"Cookie" => @cookie, "Content-Type" => "application/json"},
      )
      JSON.parse(response.body)
    end

    # approved absences
    def get_parent_approvals(user_id)
      response = post(
        path: "/services/mobile.svc/GetParentApprovalsByUser",
        headers: {"Cookie" => @cookie, "Content-Type" => "application/json"},
        body: JSON.dump(userId: user_id)
      )
      JSON.parse(response.body)
    end

    def get_learning_tasks(user_id)
      response = post(
        path: "/services/mobile/learningtasks.svc/GetAllTasksByUserId",
        headers: {"Cookie" => @cookie, "Content-Type" => "application/json"},
        body: JSON.dump(userId: user_id)
      )
      JSON.parse(response.body)
    end

    def get_activity_news
      response = post(
        path: "/services/mobile/news.svc/GetActivityNews",
        headers: {"Cookie" => @cookie, "Content-Type" => "application/json"},
        body: JSON.dump({})
      )
      JSON.parse(response.body)
    end

    # There doesn't seem to be a way to get this data via the APIs built for
    # mobile apps, but this one used by the web app does the trick
    #
    def get_events_for_parent(user_id)
      response = post(
        path: "/Services/Events.svc/GetForParent",
        headers: {"Cookie" => @cookie, "Content-Type" => "application/json"},
        body: JSON.dump({userId: user_id, limit: 20, page: 1})
      )
      data = JSON.parse(response.body)
      data.fetch("d",{}).fetch("data", []).map { |item|
        AttentionBindItemEvent.new(item)
      }.sort_by(&:event_start_time)
    end

    # I found this URL in the javascript of the web UI, but I've never seen it
    # triggered in the browser. Requesting it here results in a 500 (not 404) so
    # I think the URL is correct. Presumably there's a params or permissions issue
    def get_event(id)
      response = post(
        path: "/Services/Events.svc/GetById?sessionstate=readonly",
        headers: {"Cookie" => @cookie, "Content-Type" => "application/json"},
        body: JSON.dump(activityId: id)
      )
      JSON.parse(response.body)
    end

    def get_personal_details
      response = post(
        path: PATH_GET_PERSONAL_DETAILS,
        headers: {"Cookie" => @cookie},
      )
      data = JSON.parse(response.body)
      User.new(data.fetch("d", {}).fetch("data", {}))
    end

    # this seems to be parent teacher interview slots
    def get_pst_cycles
      response = post(
        path: PATH_PST_CYCLES,
        headers: {"Cookie" => @cookie},
      )
      JSON.parse(response.body)
    end

    private

    def generate_cookie(username, password)
      response = post(
        path: PATH_AUTH,
        headers: {"Content-Type" => "application/json"},
        body: JSON.dump({username: username, password: password, sessionstate: "readonly"})
      )
      session_id = response["Set-Cookie"][/ASP.NET_SessionId=[a-f0-9\-]+/]
      raise "login failed" if session_id.nil?
      session_id
    end

    def get(path:, headers: {})
      headers["User-Agent"] = USER_AGENT

      request = Net::HTTP::Get.new(path, headers)

      response = Net::HTTP.start(@hostname, 443, use_ssl: true) do |http|
        http.request(request)
      end

      if response.code.to_i == 200
        response
      else
        raise "GET #{path} failed (#{response.code}) (#{response.body})"
      end
    end

    def post(path:, headers: {}, body: nil )
      headers["User-Agent"] = USER_AGENT

      request = Net::HTTP::Post.new(path, headers)
      request.body = body if body

      response = Net::HTTP.start(@hostname, 443, use_ssl: true) do |http|
        http.request(request)
      end

      if response.code.to_i == 200
        response
      else
        raise "POST #{path} failed (#{response.code}) (#{response.body})"
      end
    end
  end

  class GmailClient
    def initialize(gmail_username, gmail_password)
      @username, @password = gmail_username, gmail_password
    end

    def send_email(email)
      mail = Mail.new do
        from     email.from
        to       email.to
        subject  email.subject
        text_part do
          content_type "text/plain; charset=#{email.charset}"
          body     email.body
        end
        email.attachments.each do |attachment|
          add_file filename: attachment.original_file_name, content: attachment.bytes
        end
      end

      mail.delivery_method(:smtp, address: "smtp.gmail.com", port: 587, user_name: @username, password: @password, authentication: 'plain', enable_starttls_auto: true)
      mail.deliver!
    end

  end

  class Syncer

    def run(dbpath:, compass_host:, compass_user:, compass_pass:, gmail_user:, gmail_pass:, to: )
      news_item_repo = MissingCompass::Repository.news_item(dbpath)
      message_repo = MissingCompass::Repository.message(dbpath)
      attachment_repo = MissingCompass::Repository.news_item_attachment(dbpath)
      client = MissingCompass::CompassClient.new(compass_host, compass_user, compass_pass)
      new_messages = []
      new_news_items = []

      client.get_messages.each do |msg|
        unless message_repo.exists?(msg)
          message_repo.save(msg)
          new_messages << message_repo.find(msg.id)
        end
      end

      client.get_news_feed.each do |item|
        unless news_item_repo.exists?(item)
          news_item_repo.save(item)
          item.attachments.each do |attachment|
            attachment.add_bytes(
              client.download_file(file_id: attachment.id)
            )
            attachment_repo.save(attachment)
          end

          new_news_items << news_item_repo.find(item.id)
        end
      end

      new_messages.each do |msg|
        related_news_item = news_item_repo.find(msg.news_item_id)
        attachments = related_news_item.attachments.map { |a| attachment_repo.find(a.id) }
        url = related_news_item.url(compass_host)
        email = MissingCompass::CompassEmail.from_message(to, gmail_user, msg, related_news_item, url, attachments)
        puts "New Message | #{email.to} | #{email.from} | #{email.subject} | #{attachments.size} attachments"
        GmailClient.new(gmail_user, gmail_pass).send_email(email)
      end

      new_news_items.reject { |item|
        new_messages.map(&:news_item_id).include?(item.id)
      }.each do |item|
        url = item.url(compass_host)
        attachments = item.attachments.map { |a| attachment_repo.find(a.id) }
        email = MissingCompass::CompassEmail.from_news_item(to, gmail_user, item, url, attachments)
        puts "New news Item | #{email.to} | #{email.from} | #{email.subject} | #{attachments.size} attachments"
        GmailClient.new(gmail_user, gmail_pass).send_email(email)
      end
    end
  end

  class NewEventCheck
    def run(dbpath:, compass_host:, compass_user:, compass_pass:, gmail_user:, gmail_pass:, to: )
      dbpath = File.join(File.expand_path(File.dirname(__FILE__)), "db")
      user_repo = MissingCompass::Repository.user(dbpath)
      events_repo = MissingCompass::Repository.attention_bind_item_event(dbpath)
      client = MissingCompass::CompassClient.new(compass_host, compass_user, compass_pass)
      user = client.get_personal_details

      unless user_repo.exists?(user)
        user_repo.save(user)
      end
      events = client.get_events_for_parent(user.id)

      events.each do |event|
        unless events_repo.exists?(event)
          events_repo.save(event)
          url = event.url(compass_host)
          email = MissingCompass::CompassEmail.from_event(to, gmail_user, event, url)
          puts "New Event | #{email.to} | #{email.from} | #{email.subject}"
          GmailClient.new(gmail_user, gmail_pass).send_email(email)
        end
      end
    end
  end
end

Clamp do
  option "--compass-host", "<hostname>", "The compass hostname for your school", required: true
  option "--compass-user", "<username>", "Your compass username", required: true
  option "--compass-pass", "<password>", "Yout compass password", required: true
  option "--gmail-user", "<username>", "Your gmail username", required: true
  option "--gmail-pass", "<password>", "Your gmail password", required: true
  option "--to", "<email address>", "Who to send the emails to - can be provided multiple times", required: true, multivalued: true

  subcommand "email-news", "Initialize the repository" do

    def execute
      app = MissingCompass::Syncer.new
      app.run(
        dbpath: File.join(File.expand_path(File.dirname(__FILE__)), "db"),
        compass_host: compass_host,
        compass_user: compass_user,
        compass_pass: compass_pass,
        gmail_user: gmail_user,
        gmail_pass: gmail_pass,
        to: to_list
      )
    end
  end

  subcommand "email-new-events", "Send an email for any new events listed on compass" do

    def execute
      app = MissingCompass::NewEventCheck.new
      app.run(
        dbpath: File.join(File.expand_path(File.dirname(__FILE__)), "db"),
        compass_host: compass_host,
        compass_user: compass_user,
        compass_pass: compass_pass,
        gmail_user: gmail_user,
        gmail_pass: gmail_pass,
        to: to_list
      )
    end
  end
end
